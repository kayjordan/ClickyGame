{"ast":null,"code":"import _objectSpread from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: data,\n      score: 0,\n      topScore: 0,\n      message: \"Click as many images as you can without repeating\"\n    };\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"gameCardClick\",\n    value: function gameCardClick(id) {\n      var guessedCorrectly = false;\n      var cardArray2 = this.state.data.map(function (img) {\n        if (img.id === id) {\n          if (!img.clicked) {\n            img.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return img;\n      });\n      guessedCorrectly ? this.correctGuess(cardArray2) : this.wrongGuess(cardArray2);\n    }\n  }, {\n    key: \"shuffleDeck\",\n    // shuffle the imported data array in random order\n    value: function shuffleDeck(data) {\n      var cardArray2 = data.sort(function () {\n        return 0.5 - Math.random();\n      });\n      return cardArray2;\n    }\n  }, {\n    key: \"resetDeck\",\n    // resets all the clicked properties to false\n    value: function resetDeck(data) {\n      var resetData = data.map(function (img) {\n        return _objectSpread({}, img, {\n          clicked: false\n        });\n      }); // console.log(data);\n      // console.log(resetData);\n\n      return this.shuffleDeck(resetData);\n    }\n  }, {\n    key: \"correctGuess\",\n    value: function correctGuess(cardArray2) {\n      var newScore = this.state.score;\n      newScore++;\n      this.setState({\n        data: this.shuffleDeck(cardArray2),\n        score: newScore\n      });\n    } // restarts the game with fresh data\n\n  }, {\n    key: \"wrongGuess\",\n    value: function wrongGuess(cardArray2) {\n      this.setState({\n        data: this.resetDeck(cardArray2),\n        score: 0\n      });\n      alert(\"Game over!\");\n    } // when a card is clicked, check if it has been clicked before,\n    // then update that cards clicked property\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.state.data.map(function (img) {\n        return React.createElement(\"div\", {\n          className: \"animated rollIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(GameCard, {\n          key: img.id,\n          id: img.id,\n          image: img.image,\n          animate: !_this2.state.score,\n          clicked: img.clicked,\n          handleClick: _this2.gameCardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js"],"names":["React","Component","Container","GameCard","Header","data","Game","state","score","topScore","message","id","guessedCorrectly","cardArray2","map","img","clicked","correctGuess","wrongGuess","sort","Math","random","resetData","shuffleDeck","newScore","setState","resetDeck","alert","image","gameCardClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\n\nclass Game extends Component {\n\n   state = {\n       data,\n       score: 0,\n       topScore: 0,\n       message: \"Click as many images as you can without repeating\"\n   };\n\n\n   gameCardClick(id) {\n      let guessedCorrectly = false;\n      const cardArray2 = this.state.data.map(img => {\n        if (img.id === id) {\n          if (!img.clicked) {\n            img.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n        return img;     \n      });\n   \n      guessedCorrectly ? this.correctGuess(cardArray2) : this.wrongGuess(cardArray2);\n    };\n  \n\n   // shuffle the imported data array in random order\n   shuffleDeck(data) {\n       let cardArray2 = data.sort(function(){return 0.5 - Math.random()});\n       return cardArray2;\n   };\n\n   // resets all the clicked properties to false\n   resetDeck(data) {\n       const resetData = data.map(img => ({ ...img, clicked: false }));\n       // console.log(data);\n       // console.log(resetData);\n       return this.shuffleDeck(resetData);\n     };\n\n   correctGuess(cardArray2) {\n       let newScore = this.state.score;\n       newScore++\n\n       this.setState({\n           data: this.shuffleDeck(cardArray2),\n           score: newScore,\n        \n       })\n   }\n\n   // restarts the game with fresh data\n   wrongGuess (cardArray2) {\n       this.setState({\n           data: this.resetDeck(cardArray2),\n           score: 0\n       })\n       alert(\"Game over!\");   \n      }\n\n   // when a card is clicked, check if it has been clicked before,\n   // then update that cards clicked property\n   \n\n   render() {\n       return (\n           <div>\n               <Header score={this.state.score} />\n         \n               <Container>\n                   {\n                       this.state.data.map(img => (\n                           <div className=\"animated rollIn\">\n                               <GameCard\n                                   key={img.id}\n                                   id={img.id} \n                                   image={img.image}\n                                   animate={!this.state.score}\n                                   clicked={img.clicked}\n                                   handleClick={this.gameCardClick}\n                               />      \n                           </div>  \n                       ))\n                   }\n               </Container>\n    \n           </div>\n       );\n   }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}