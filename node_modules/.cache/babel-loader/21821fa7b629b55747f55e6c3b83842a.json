{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport httpplease from 'httpplease';\nimport ieXDomain from 'httpplease/plugins/oldiexdomain';\nimport { configurationError, isSupportedEnvironment, randomString, uniquifySVGIDs, unsupportedBrowserError } from './utils';\nvar http = httpplease.use(ieXDomain);\nvar Status = {\n  PENDING: 'pending',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  FAILED: 'failed',\n  UNSUPPORTED: 'unsupported'\n};\nvar getRequestsByUrl = {};\nvar loadedIcons = {};\n\nvar InlineSVG = function (_React$PureComponent) {\n  _inherits(InlineSVG, _React$PureComponent);\n\n  function InlineSVG(props) {\n    _classCallCheck(this, InlineSVG);\n\n    var _this = _possibleConstructorReturn(this, (InlineSVG.__proto__ || Object.getPrototypeOf(InlineSVG)).call(this, props));\n\n    _this.handleLoad = function (err, res) {\n      var isCached = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var _this$props = _this.props,\n          onLoad = _this$props.onLoad,\n          src = _this$props.src;\n\n      if (err) {\n        _this.fail(err);\n\n        return;\n      }\n\n      if (_this.isActive) {\n        _this.setState({\n          loadedText: res.text,\n          status: Status.LOADED\n        }, function () {\n          onLoad(src, isCached);\n        });\n      }\n    };\n\n    _this.state = {\n      status: Status.PENDING\n    };\n    _this.isActive = false;\n    return _this;\n  }\n\n  _createClass(InlineSVG, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.isActive = true;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var status = this.state.status;\n      var _props = this.props,\n          src = _props.src,\n          supportTest = _props.supportTest;\n      /* istanbul ignore else */\n\n      if (status === Status.PENDING) {\n        if (supportTest()) {\n          if (src) {\n            this.startLoad();\n            return;\n          }\n\n          this.fail(configurationError('Missing source'));\n          return;\n        }\n\n        this.fail(unsupportedBrowserError());\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var src = this.props.src;\n\n      if (prevProps.src !== src) {\n        if (src) {\n          this.startLoad();\n          return;\n        }\n\n        this.fail(configurationError('Missing source'));\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isActive = false;\n    }\n  }, {\n    key: 'getFile',\n    value: function getFile(callback) {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          cacheGetRequests = _props2.cacheGetRequests,\n          src = _props2.src;\n\n      if (cacheGetRequests) {\n        if (loadedIcons[src]) {\n          var _loadedIcons$src = _slicedToArray(loadedIcons[src], 2),\n              err = _loadedIcons$src[0],\n              res = _loadedIcons$src[1];\n\n          callback(err, res, true);\n        }\n\n        if (!getRequestsByUrl[src]) {\n          getRequestsByUrl[src] = [];\n          http.get(src, function (err, res) {\n            getRequestsByUrl[src].forEach(function (cb) {\n              var currentSrc = _this2.props.src;\n              loadedIcons[src] = [err, res];\n\n              if (src === currentSrc) {\n                cb(err, res);\n              }\n            });\n          });\n        }\n\n        getRequestsByUrl[src].push(callback);\n      } else {\n        http.get(src, function (err, res) {\n          var currentSrc = _this2.props.src;\n\n          if (src === currentSrc) {\n            callback(err, res);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'fail',\n    value: function fail(error) {\n      var onError = this.props.onError;\n      var status = error.isUnsupportedBrowserError ? Status.UNSUPPORTED : Status.FAILED;\n      /* istanbul ignore else */\n\n      if (this.isActive) {\n        this.setState({\n          status: status\n        }, function () {\n          if (typeof onError === 'function') {\n            onError(error);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'startLoad',\n    value: function startLoad() {\n      /* istanbul ignore else */\n      if (this.isActive) {\n        this.setState({\n          status: Status.LOADING\n        }, this.load);\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load() {\n      var src = this.props.src;\n      var match = src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n\n      if (match) {\n        return this.handleLoad(null, {\n          text: match[1] ? atob(match[2]) : decodeURIComponent(match[2])\n        });\n      }\n\n      return this.getFile(this.handleLoad);\n    }\n  }, {\n    key: 'getClassName',\n    value: function getClassName() {\n      var status = this.state.status;\n      var className = this.props.className;\n      var nextClassName = 'isvg ' + status;\n\n      if (className) {\n        nextClassName += ' ' + className;\n      }\n\n      return nextClassName;\n    }\n  }, {\n    key: 'processSVG',\n    value: function processSVG(text) {\n      var _props3 = this.props,\n          uniquifyIDs = _props3.uniquifyIDs,\n          uniqueHash = _props3.uniqueHash,\n          baseURL = _props3.baseURL,\n          processSVG = _props3.processSVG;\n      var svgText = text;\n\n      if (processSVG) {\n        svgText = processSVG(svgText);\n      }\n\n      if (uniquifyIDs) {\n        return uniquifySVGIDs(svgText, uniqueHash || randomString(), baseURL);\n      }\n\n      return svgText;\n    }\n  }, {\n    key: 'renderContents',\n    value: function renderContents() {\n      var status = this.state.status;\n      var _props4 = this.props,\n          children = _props4.children,\n          preloader = _props4.preloader;\n\n      switch (status) {\n        case Status.UNSUPPORTED:\n        case Status.FAILED:\n          return children;\n\n        default:\n          return preloader;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var loadedText = this.state.loadedText;\n      var _props5 = this.props,\n          style = _props5.style,\n          wrapper = _props5.wrapper;\n      var content = void 0;\n      var html = void 0;\n\n      if (loadedText) {\n        html = {\n          __html: this.processSVG(loadedText)\n        };\n      } else {\n        content = this.renderContents();\n      }\n\n      return wrapper({\n        style: style,\n        className: this.getClassName(),\n        dangerouslySetInnerHTML: html\n      }, content);\n    }\n  }]);\n\n  return InlineSVG;\n}(React.PureComponent);\n\nInlineSVG.propTypes = {\n  baseURL: PropTypes.string,\n  cacheGetRequests: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onError: PropTypes.func,\n  onLoad: PropTypes.func,\n  preloader: PropTypes.node,\n  processSVG: PropTypes.func,\n  src: PropTypes.string.isRequired,\n  style: PropTypes.object,\n  supportTest: PropTypes.func,\n  uniqueHash: PropTypes.string,\n  uniquifyIDs: PropTypes.bool,\n  wrapper: PropTypes.func\n};\nInlineSVG.defaultProps = {\n  baseURL: '',\n  cacheGetRequests: false,\n  onLoad: function onLoad() {},\n  supportTest: isSupportedEnvironment,\n  uniquifyIDs: true,\n  wrapper: React.createFactory('span')\n};\nexport default InlineSVG;","map":null,"metadata":{},"sourceType":"module"}