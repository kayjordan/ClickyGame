{"ast":null,"code":"'use strict';\n\nvar urllite = require('urllite/lib/core'),\n    once = require('../lib/utils/once');\n\nvar warningShown = false;\nvar supportsXHR = once(function () {\n  return typeof window !== 'undefined' && window !== null && window.XMLHttpRequest && 'withCredentials' in new window.XMLHttpRequest();\n}); // This plugin creates a Microsoft `XDomainRequest` in supporting browsers when\n// the URL being requested is on a different domain. This is necessary to\n// support IE9, which only supports CORS via its proprietary `XDomainRequest`\n// object. We need to check the URL because `XDomainRequest` *doesn't* work for\n// same domain requests (unless your server sends CORS headers).\n// `XDomainRequest` also has other limitations (no custom headers), so we try to\n// catch those and error.\n\nmodule.exports = {\n  createXHR: function createXHR(req) {\n    var a, b, k;\n\n    if (typeof window === 'undefined' || window === null) {\n      return;\n    }\n\n    a = urllite(req.url);\n    b = urllite(window.location.href); // Don't do anything for same-domain requests.\n\n    if (!a.host) {\n      return;\n    }\n\n    if (a.protocol === b.protocol && a.host === b.host && a.port === b.port) {\n      return;\n    } // Show a warning if there are custom headers. We do this even in\n    // browsers that won't use XDomainRequest so that users know there's an\n    // issue right away, instead of if/when they test in IE9.\n\n\n    if (!warningShown && req.headers) {\n      for (k in req.headers) {\n        if (req.headers.hasOwnProperty(k)) {\n          warningShown = true;\n\n          if (window && window.console && window.console.warn) {\n            window.console.warn('Request headers are ignored in old IE when using the oldiexdomain plugin.');\n          }\n\n          break;\n        }\n      }\n    } // Don't do anything if we can't do anything (:\n    // Don't do anything if the browser supports proper XHR.\n\n\n    if (window.XDomainRequest && !supportsXHR()) {\n      // We've come this far. Might as well make an XDomainRequest.\n      var xdr = new window.XDomainRequest();\n\n      xdr.setRequestHeader = function () {}; // Ignore request headers.\n\n\n      return xdr;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}