{"ast":null,"code":"import _objectSpread from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: data,\n      score: 0,\n      topScore: 0,\n      message: \"Click as many images as you can without repeating\"\n    };\n\n    _this.gameCardClick = function (id) {\n      var guessedCorrectly = false; // newData will be the data array with updated clicked properties\n\n      var cardArray2 = _this.state.data.map(function (img) {\n        if (img.id === id) {\n          if (!img.clicked) {\n            img.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return img;\n      }); // if guessedCorrectly = true, run the correctGuess function,\n      // else run the wrongGuess function\n\n\n      guessedCorrectly ? _this.correctGuess(cardArray2) : _this.wrongGuess(cardArray2);\n    };\n\n    _this.shuffleDeck = function (data) {\n      var cardArray2 = data.sort(function () {\n        return 0.5 - Math.random();\n      });\n      return cardArray2;\n    };\n\n    _this.resetDeck = function (data) {\n      var resetData = data.map(function (img) {\n        return _objectSpread({}, img, {\n          clicked: false\n        });\n      }); // console.log(data);\n      // console.log(resetData);\n\n      return _this.shuffleDeck(resetData);\n    };\n\n    _this.correctGuess = function (cardArray2) {\n      var newScore = _this.state.score;\n      newScore++;\n      var newTopScore = Math.max(newScore, _this.state.topScore);\n\n      _this.setState({\n        data: _this.shuffleDeck(cardArray2),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.wrongGuess = function (cardArray2) {\n      _this.setState({\n        data: _this.resetDeck(cardArray2),\n        score: 0\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    // when a card is clicked, check if it has been clicked before,\n    // then update that cards clicked property\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.data.map(function (img) {\n        return React.createElement(\"div\", {\n          className: \"animated rollIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, React.createElement(GameCard, {\n          key: img.id,\n          id: img.id,\n          image: img.image,\n          animate: !_this2.state.score && _this2.state.topScore,\n          clicked: img.clicked,\n          handleClick: _this2.gameCardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js"],"names":["React","Component","Container","GameCard","Header","data","Game","state","score","topScore","message","gameCardClick","id","guessedCorrectly","cardArray2","map","img","clicked","correctGuess","wrongGuess","shuffleDeck","sort","Math","random","resetDeck","resetData","newScore","newTopScore","max","setState","image"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;IAGMC,I;;;;;;;;;;;;;;;;;UAEHC,K,GAAQ;AACJF,MAAAA,IAAI,EAAJA,IADI;AAEJG,MAAAA,KAAK,EAAE,CAFH;AAGJC,MAAAA,QAAQ,EAAE,CAHN;AAIJC,MAAAA,OAAO,EAAE;AAJL,K;;UAQRC,a,GAAgB,UAAAC,EAAE,EAAI;AACnB,UAAIC,gBAAgB,GAAG,KAAvB,CADmB,CAEnB;;AACA,UAAMC,UAAU,GAAG,MAAKP,KAAL,CAAWF,IAAX,CAAgBU,GAAhB,CAAoB,UAAAC,GAAG,EAAI;AAC5C,YAAIA,GAAG,CAACJ,EAAJ,KAAWA,EAAf,EAAmB;AACjB,cAAI,CAACI,GAAG,CAACC,OAAT,EAAkB;AAChBD,YAAAA,GAAG,CAACC,OAAJ,GAAc,IAAd;AACAJ,YAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AACD,eAAOG,GAAP;AACD,OARkB,CAAnB,CAHmB,CAYnB;AACA;;;AACAH,MAAAA,gBAAgB,GAAG,MAAKK,YAAL,CAAkBJ,UAAlB,CAAH,GAAmC,MAAKK,UAAL,CAAgBL,UAAhB,CAAnD;AACD,K;;UAIFM,W,GAAc,UAAAf,IAAI,EAAI;AAClB,UAAIS,UAAU,GAAGT,IAAI,CAACgB,IAAL,CAAU,YAAU;AAAC,eAAO,MAAMC,IAAI,CAACC,MAAL,EAAb;AAA2B,OAAhD,CAAjB;AACA,aAAOT,UAAP;AACH,K;;UAGDU,S,GAAY,UAAAnB,IAAI,EAAI;AAChB,UAAMoB,SAAS,GAAGpB,IAAI,CAACU,GAAL,CAAS,UAAAC,GAAG;AAAA,iCAAUA,GAAV;AAAeC,UAAAA,OAAO,EAAE;AAAxB;AAAA,OAAZ,CAAlB,CADgB,CAEhB;AACA;;AACA,aAAO,MAAKG,WAAL,CAAiBK,SAAjB,CAAP;AACD,K;;UAGHP,Y,GAAe,UAAAJ,UAAU,EAAI;AACzB,UAAIY,QAAQ,GAAG,MAAKnB,KAAL,CAAWC,KAA1B;AACAkB,MAAAA,QAAQ;AACR,UAAIC,WAAW,GAAGL,IAAI,CAACM,GAAL,CAASF,QAAT,EAAmB,MAAKnB,KAAL,CAAWE,QAA9B,CAAlB;;AAEA,YAAKoB,QAAL,CAAc;AACVxB,QAAAA,IAAI,EAAE,MAAKe,WAAL,CAAiBN,UAAjB,CADI;AAEVN,QAAAA,KAAK,EAAEkB,QAFG;AAGVjB,QAAAA,QAAQ,EAAEkB;AAHA,OAAd;AAMH,K;;UAGDR,U,GAAa,UAAAL,UAAU,EAAI;AACvB,YAAKe,QAAL,CAAc;AACVxB,QAAAA,IAAI,EAAE,MAAKmB,SAAL,CAAeV,UAAf,CADI;AAEVN,QAAAA,KAAK,EAAE;AAFG,OAAd;AAIH,K;;;;;;;AAED;AACA;6BAGS;AAAA;;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAA1B;AAAiC,QAAA,QAAQ,EAAI,KAAKD,KAAL,CAAWE,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,KAAKF,KAAL,CAAWF,IAAX,CAAgBU,GAAhB,CAAoB,UAAAC,GAAG;AAAA,eACnB;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,QAAD;AACI,UAAA,GAAG,EAAEA,GAAG,CAACJ,EADb;AAEI,UAAA,EAAE,EAAEI,GAAG,CAACJ,EAFZ;AAGI,UAAA,KAAK,EAAEI,GAAG,CAACc,KAHf;AAII,UAAA,OAAO,EAAE,CAAC,MAAI,CAACvB,KAAL,CAAWC,KAAZ,IAAqB,MAAI,CAACD,KAAL,CAAWE,QAJ7C;AAKI,UAAA,OAAO,EAAEO,GAAG,CAACC,OALjB;AAMI,UAAA,WAAW,EAAE,MAAI,CAACN,aANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADmB;AAAA,OAAvB,CAFR,CAHJ,CADJ;AAuBH;;;;EA5FeV,S;;AA+FnB,eAAeK,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\n\nclass Game extends Component {\n\n   state = {\n       data,\n       score: 0,\n       topScore: 0,\n       message: \"Click as many images as you can without repeating\"\n   };\n\n\n   gameCardClick = id => {\n      let guessedCorrectly = false;\n      // newData will be the data array with updated clicked properties\n      const cardArray2 = this.state.data.map(img => {\n        if (img.id === id) {\n          if (!img.clicked) {\n            img.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n        return img;     \n      });\n      // if guessedCorrectly = true, run the correctGuess function,\n      // else run the wrongGuess function\n      guessedCorrectly ? this.correctGuess(cardArray2) : this.wrongGuess(cardArray2);\n    };\n  \n\n   // shuffle the imported data array in random order\n   shuffleDeck = data => {\n       let cardArray2 = data.sort(function(){return 0.5 - Math.random()});\n       return cardArray2;\n   };\n\n   // resets all the clicked properties to false\n   resetDeck = data => {\n       const resetData = data.map(img => ({ ...img, clicked: false }));\n       // console.log(data);\n       // console.log(resetData);\n       return this.shuffleDeck(resetData);\n     };\n\n   // checks to see if score is higher than the topscore then updates the state with the update array\n   correctGuess = cardArray2 => {\n       let newScore = this.state.score;\n       newScore++\n       let newTopScore = Math.max(newScore, this.state.topScore);\n\n       this.setState({\n           data: this.shuffleDeck(cardArray2),\n           score: newScore,\n           topScore: newTopScore,\n        \n       })\n   }\n\n   // restarts the game with fresh data\n   wrongGuess = cardArray2 => {\n       this.setState({\n           data: this.resetDeck(cardArray2),\n           score: 0\n       })\n   }\n\n   // when a card is clicked, check if it has been clicked before,\n   // then update that cards clicked property\n   \n\n   render() {\n       return (\n           <div>\n               <Header score={this.state.score} topScore = {this.state.topScore} />\n         \n               <Container>\n                   {\n                       this.state.data.map(img => (\n                           <div className=\"animated rollIn\">\n                               <GameCard\n                                   key={img.id}\n                                   id={img.id} \n                                   image={img.image}\n                                   animate={!this.state.score && this.state.topScore}\n                                   clicked={img.clicked}\n                                   handleClick={this.gameCardClick}\n                               />      \n                           </div>  \n                       ))\n                   }\n               </Container>\n    \n           </div>\n       );\n   }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}