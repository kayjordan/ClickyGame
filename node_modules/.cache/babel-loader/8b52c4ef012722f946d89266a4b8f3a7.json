{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport once from 'once';\nexport var supportsInlineSVG = once(function () {\n  /* istanbul ignore next */\n  if (!document) {\n    return false;\n  }\n\n  var div = document.createElement('div');\n  div.innerHTML = '<svg />';\n  return div.firstChild && div.firstChild.namespaceURI === 'http://www.w3.org/2000/svg';\n});\nexport var isSupportedEnvironment = once(function () {\n  return supportsInlineSVG() && typeof window !== 'undefined' && window !== null ? window.XMLHttpRequest || window.XDomainRequest : false;\n});\nexport var randomString = function randomString() {\n  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n  var letters = 'abcdefghijklmnopqrstuvwxyz';\n  var numbers = '1234567890';\n  var charset = letters + letters.toUpperCase() + numbers;\n\n  var randomCharacter = function randomCharacter(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  };\n\n  var R = '';\n\n  for (var i = 0; i < length; i++) {\n    R += randomCharacter(charset);\n  }\n\n  return R;\n};\nexport var uniquifySVGIDs = function () {\n  var mkAttributePattern = function mkAttributePattern(attr) {\n    return '(?:(?:\\\\s|\\\\:)' + attr + ')';\n  };\n\n  var idPattern = new RegExp('(?:(' + mkAttributePattern('id') + ')=\"([^\"]+)\")|(?:(' + mkAttributePattern('href') + '|' + mkAttributePattern('role') + '|' + mkAttributePattern('arcrole') + ')=\"\\\\#([^\"]+)\")|(?:=\"url\\\\(\\\\#([^\\\\)]+)\\\\)\")|(?:url\\\\(\\\\#([^\\\\)]+)\\\\))', 'g');\n  return function (svgText, svgID, baseURL) {\n    var uniquifyID = function uniquifyID(id) {\n      return id + '___' + svgID;\n    };\n\n    return svgText.replace(idPattern, function (m, p1, p2, p3, p4, p5, p6) {\n      //eslint-disable-line consistent-return\n\n      /* istanbul ignore else */\n      if (p2) {\n        return p1 + '=\"' + uniquifyID(p2) + '\"';\n      }\n\n      if (p4) {\n        return p3 + '=\"' + baseURL + '#' + uniquifyID(p4) + '\"';\n      }\n\n      if (p5) {\n        return '=\"url(' + baseURL + '#' + uniquifyID(p5) + ')\"';\n      }\n\n      if (p6) {\n        return 'url(' + baseURL + '#' + uniquifyID(p6) + ')';\n      }\n    });\n  };\n}();\n\nvar InlineSVGError = function (_Error) {\n  _inherits(InlineSVGError, _Error);\n\n  function InlineSVGError(message) {\n    var _ret;\n\n    _classCallCheck(this, InlineSVGError);\n\n    var _this = _possibleConstructorReturn(this, (InlineSVGError.__proto__ || Object.getPrototypeOf(InlineSVGError)).call(this));\n\n    _this.name = 'InlineSVGError';\n    _this.isSupportedBrowser = true;\n    _this.isConfigurationError = false;\n    _this.isUnsupportedBrowserError = false;\n    _this.message = message;\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n\n  return InlineSVGError;\n}(Error);\n\nvar createError = function createError(message, attrs) {\n  var err = new InlineSVGError(message);\n  return _extends({}, err, attrs);\n};\n\nexport var unsupportedBrowserError = function unsupportedBrowserError(message) {\n  var newMessage = message;\n  /* istanbul ignore else */\n\n  if (!newMessage) {\n    newMessage = 'Unsupported Browser';\n  }\n\n  return createError(newMessage, {\n    isSupportedBrowser: false,\n    isUnsupportedBrowserError: true\n  });\n};\nexport var configurationError = function configurationError(message) {\n  return createError(message, {\n    isConfigurationError: true\n  });\n};","map":null,"metadata":{},"sourceType":"module"}