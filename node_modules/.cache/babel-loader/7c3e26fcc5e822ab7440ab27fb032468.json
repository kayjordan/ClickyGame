{"ast":null,"code":"import _objectSpread from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: data,\n      score: 0,\n      topScore: 0,\n      message: \"Click as many images as you can without repeating\"\n    };\n\n    _this.shuffleDeck = function (data) {\n      var newData = data.sort(function (a, b) {\n        return 0.5 - Math.random();\n      });\n      return newData;\n    };\n\n    _this.resetDeck = function (data) {\n      var resetData = data.map(function (item) {\n        return _objectSpread({}, item, {\n          clicked: false\n        });\n      }); // console.log(data);\n      // console.log(resetData);\n\n      return _this.shuffleDeck(resetData);\n    };\n\n    _this.correctGuess = function (newData) {\n      var newScore = _this.state.score;\n      newScore++;\n      var newTopScore = Math.max(newScore, _this.state.topScore);\n\n      _this.setState({\n        data: _this.shuffleDeck(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.wrongGuess = function (newData) {\n      _this.setState({\n        data: _this.resetDeck(newData),\n        score: 0\n      });\n    };\n\n    _this.gameCardClick = function (id) {\n      var guessedCorrectly = false;\n\n      var newData = _this.state.data.map(function (item) {\n        if (item.id === id) {\n          if (!item.clicked) {\n            item.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return item;\n      });\n\n      guessedCorrectly ? _this.correctGuess(newData) : _this.wrongGuess(newData);\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDiMount\",\n    // you need to tell which card is clicked on and add that card to an array of clicked on cards\n    // if user selects a card that is pushed to that array then the game will be over\n    // gameover will return that the game is over\n    value: function componentDiMount() {\n      this.setState({\n        data: this.shuffleDeck(this.state.data)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), this.state.data.map(function (card) {\n        return React.createElement(GameCard, {\n          key: item.id,\n          id: item.id,\n          image: item.image,\n          clicked: item.clicked,\n          handleClick: _this2.gameCardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js"],"names":["React","Component","Container","GameCard","Header","data","Game","state","score","topScore","message","shuffleDeck","newData","sort","a","b","Math","random","resetDeck","resetData","map","item","clicked","correctGuess","newScore","newTopScore","max","setState","wrongGuess","gameCardClick","id","guessedCorrectly","card","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        message: \"Click as many images as you can without repeating\"\n    };\n    // you need to tell which card is clicked on and add that card to an array of clicked on cards\n    // if user selects a card that is pushed to that array then the game will be over\n    // gameover will return that the game is over\n    \n    componentDiMount() { \n       this.setState({ data: this.shuffleDeck(this.state.data)}); \n\n    }\n\n    shuffleDeck = data => { \n       let newData = data.sort(function(a,b){ return 0.5 - Math.random()});\n       return newData;\n    }; \n\n    resetDeck = data => {\n      const resetData = data.map(item => ({ ...item, clicked: false }));\n      // console.log(data);\n      // console.log(resetData);\n      return this.shuffleDeck(resetData);\n    };\n\n    correctGuess = newData => { \n       let newScore = this.state.score; \n       newScore++\n       let newTopScore = Math.max(newScore, this.state.topScore); \n\n       this.setState({ \n          data: this.shuffleDeck(newData), \n          score: newScore, \n          topScore: newTopScore, \n      \n       })\n    }\n\n    wrongGuess = newData => { \n       this.setState({ \n          data: this.resetDeck(newData), \n          score: 0 \n       })\n    }\n\n    gameCardClick = id => { \n       let guessedCorrectly = false; \n       const newData = this.state.data.map(item => { \n          if ( item.id === id){ \n             if (!item.clicked) { \n                item.clicked = true; \n                guessedCorrectly = true; \n\n             }\n          }\n          return item;\n       }); \n       guessedCorrectly ? this.correctGuess(newData) : this.wrongGuess(newData);   \n    }; \n\n    render() {\n        return (\n         <Container>\n         <Header score={this.state.score} topScore = {this.state.topScore} />\n         {this.state.data.map(card => (\n          <GameCard\n            key={item.id}\n            id={item.id}\n            image={item.image}\n            clicked={item.clicked}\n            handleClick={this.gameCardClick}\n        \n          />\n          ))}\n        </Container>   \n        );\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}