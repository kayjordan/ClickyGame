{"ast":null,"code":"'use strict';\n\nvar cleanURL = require('../plugins/cleanurl'),\n    XHR = require('./xhr'),\n    delay = require('./utils/delay'),\n    RequestError = require('./error'),\n    Response = require('./response'),\n    Request = require('./request'),\n    extend = require('xtend'),\n    once = require('./utils/once');\n\nvar i,\n    createError = RequestError.create;\n\nfunction factory(defaults, plugins) {\n  defaults = defaults || {};\n  plugins = plugins || [];\n\n  function http(req, cb) {\n    var xhr, plugin, done, k, timeoutId, supportsLoadAndErrorEvents;\n    req = new Request(extend(defaults, req));\n\n    for (i = 0; i < plugins.length; i++) {\n      plugin = plugins[i];\n\n      if (plugin.processRequest) {\n        plugin.processRequest(req);\n      }\n    } // Give the plugins a chance to create the XHR object\n\n\n    for (i = 0; i < plugins.length; i++) {\n      plugin = plugins[i];\n\n      if (plugin.createXHR) {\n        xhr = plugin.createXHR(req);\n        break; // First come, first serve\n      }\n    }\n\n    xhr = xhr || new XHR();\n    req.xhr = xhr; // Use a single completion callback. This can be called with or without\n    // an error. If no error is passed, the request will be examined to see\n    // if it was successful.\n\n    done = once(delay(function (rawError) {\n      clearTimeout(timeoutId);\n      xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = xhr.ontimeout = xhr.onprogress = null;\n      var err = getError(req, rawError);\n      var res = err || Response.fromRequest(req);\n\n      for (i = 0; i < plugins.length; i++) {\n        plugin = plugins[i];\n\n        if (plugin.processResponse) {\n          plugin.processResponse(res);\n        }\n      } // Invoke callbacks\n\n\n      if (err && req.onerror) req.onerror(err);\n      if (!err && req.onload) req.onload(res);\n      if (cb) cb(err, err ? undefined : res);\n    }));\n    supportsLoadAndErrorEvents = 'onload' in xhr && 'onerror' in xhr;\n\n    xhr.onload = function () {\n      done();\n    };\n\n    xhr.onerror = done;\n\n    xhr.onabort = function () {\n      done();\n    }; // We'd rather use `onload`, `onerror`, and `onabort` since they're the\n    // only way to reliably detect successes and failures but, if they\n    // aren't available, we fall back to using `onreadystatechange`.\n\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState !== 4) return;\n      if (req.aborted) return done();\n\n      if (!supportsLoadAndErrorEvents) {\n        // Assume a status of 0 is an error. This could be a false\n        // positive, but there's no way to tell when using\n        // `onreadystatechange` ):\n        // See matthewwithanm/react-inlinesvg#10.\n        // Some browsers don't like you reading XHR properties when the\n        // XHR has been aborted. In case we've gotten here as a result\n        // of that (either our calling `about()` in the timeout handler\n        // or the user calling it directly even though they shouldn't),\n        // be careful about accessing it.\n        var status;\n\n        try {\n          status = xhr.status;\n        } catch (err) {}\n\n        var err = status === 0 ? new Error('Internal XHR Error') : null;\n        return done(err);\n      }\n    }; // IE sometimes fails if you don't specify every handler.\n    // See http://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n\n\n    xhr.ontimeout = function () {\n      /* noop */\n    };\n\n    xhr.onprogress = function () {\n      /* noop */\n    };\n\n    xhr.open(req.method, req.url);\n\n    if (req.timeout) {\n      // If we use the normal XHR timeout mechanism (`xhr.timeout` and\n      // `xhr.ontimeout`), `onreadystatechange` will be triggered before\n      // `ontimeout`. There's no way to recognize that it was triggered by\n      // a timeout, and we'd be unable to dispatch the right error.\n      timeoutId = setTimeout(function () {\n        req.timedOut = true;\n        done();\n\n        try {\n          xhr.abort();\n        } catch (err) {}\n      }, req.timeout);\n    }\n\n    for (k in req.headers) {\n      if (req.headers.hasOwnProperty(k)) {\n        xhr.setRequestHeader(k, req.headers[k]);\n      }\n    }\n\n    xhr.send(req.body);\n    return req;\n  }\n\n  var method,\n      methods = ['get', 'post', 'put', 'head', 'patch', 'delete'],\n      verb = function verb(method) {\n    return function (req, cb) {\n      req = new Request(req);\n      req.method = method;\n      return http(req, cb);\n    };\n  };\n\n  for (i = 0; i < methods.length; i++) {\n    method = methods[i];\n    http[method] = verb(method);\n  }\n\n  http.plugins = function () {\n    return plugins;\n  };\n\n  http.defaults = function (newValues) {\n    if (newValues) {\n      return factory(extend(defaults, newValues), plugins);\n    }\n\n    return defaults;\n  };\n\n  http.use = function () {\n    var newPlugins = Array.prototype.slice.call(arguments, 0);\n    return factory(defaults, plugins.concat(newPlugins));\n  };\n\n  http.bare = function () {\n    return factory();\n  };\n\n  http.Request = Request;\n  http.Response = Response;\n  http.RequestError = RequestError;\n  return http;\n}\n\nmodule.exports = factory({}, [cleanURL]);\n/**\n * Analyze the request to see if it represents an error. If so, return it! An\n * original error object can be passed as a hint.\n */\n\nfunction getError(req, err) {\n  if (req.aborted) return createError('Request aborted', req, {\n    name: 'Abort'\n  });\n  if (req.timedOut) return createError('Request timeout', req, {\n    name: 'Timeout'\n  });\n  var xhr = req.xhr;\n  var type = Math.floor(xhr.status / 100);\n  var kind;\n\n  switch (type) {\n    case 0:\n    case 2:\n      // These don't represent errors unless the function was passed an\n      // error object explicitly.\n      if (!err) return;\n      return createError(err.message, req);\n\n    case 4:\n      // Sometimes 4XX statuses aren't errors.\n      if (xhr.status === 404 && !req.errorOn404) return;\n      kind = 'Client';\n      break;\n\n    case 5:\n      kind = 'Server';\n      break;\n\n    default:\n      kind = 'HTTP';\n  }\n\n  var msg = kind + ' Error: ' + 'The server returned a status of ' + xhr.status + ' for the request \"' + req.method.toUpperCase() + ' ' + req.url + '\"';\n  return createError(msg, req);\n}","map":null,"metadata":{},"sourceType":"script"}