{"ast":null,"code":"import _classCallCheck from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: data,\n      score: 0,\n      topScore: 0,\n      message: \"Click as many images as you can without repeating\"\n    };\n\n    _this.shuffleDeck = function () {\n      _this.setState({\n        data: _this.state.data.sort(function (a, b) {\n          return 0.5 - Math.random();\n        })\n      });\n    };\n\n    _this.resetCards = function () {\n      var newCards = _this.state.data.slice();\n\n      newCards.forEach(function (obj) {\n        if (obj.clicked) {\n          obj.clicked = false;\n        }\n      });\n\n      _this.setState({\n        data: newCards\n      });\n    };\n\n    _this.gameOver = function () {\n      console.log(\"Game over.\");\n\n      _this.setState({\n        clicks: 0,\n        score: 0\n      });\n\n      _this.resetCards();\n\n      _this.shuffleDeck();\n    };\n\n    _this.gameWin = function () {\n      console.log(\"You win!\");\n\n      _this.setState({\n        clicks: 0,\n        score: _this.state.score + 1\n      });\n\n      _this.resetCards();\n\n      _this.shuffleDeck();\n    };\n\n    _this.handleClick = function (id) {\n      console.log(\"clicked card id: \".concat(id));\n\n      _this.shuffleDeck();\n\n      _this.setState({\n        clicks: _this.state.clicks + 1\n      });\n\n      var newCards = _this.state.data.slice();\n\n      newCards.map(function (obj) {\n        if (obj.id === id) {\n          if (obj.clicked) {\n            _this.gameOver();\n          } else {\n            obj.clicked = true;\n          }\n        }\n      });\n\n      if (_this.state.clicks >= _this.state.data.length - 1) {\n        newCards.map(function (obj) {\n          if (obj.id === id) {\n            if (obj.clicked) {\n              _this.gameWin();\n            } else {\n              return;\n            }\n          }\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), this.state.data.map(function (card) {\n        return React.createElement(GameCard, {\n          clickCount: _this2.clickCount,\n          id: card.id,\n          key: card.id,\n          image: card.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js"],"names":["React","Component","Container","GameCard","Header","data","Game","state","score","topScore","message","shuffleDeck","setState","sort","a","b","Math","random","resetCards","newCards","slice","forEach","obj","clicked","gameOver","console","log","clicks","gameWin","handleClick","id","map","length","card","clickCount","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        message: \"Click as many images as you can without repeating\"\n    };\n    // you need to tell which card is clicked on and add that card to an array of clicked on cards\n    // if user selects a card that is pushed to that array then the game will be over\n    // gameover will return that the game is over\n    \n\n\n\n\n    shuffleDeck = () => { \n        this.setState({ \n            data: this.state.data.sort(function(a,b){ \n                return 0.5 - Math.random();\n            })\n        });\n    }; \n\n    resetCards = () => {\n        let newCards = this.state.data.slice();\n        newCards.forEach(obj => {\n           if (obj.clicked) {\n              obj.clicked = false;\n           }\n        });\n        this.setState({\n           data: newCards\n        }); \n     };\n\n\n    gameOver = () => {\n    console.log(\"Game over.\");\n    this.setState({\n       clicks: 0,\n       score: 0\n    });\n    this.resetCards();\n    this.shuffleDeck();\n };\n\n\n gameWin = () => {\n    console.log(\"You win!\");\n    this.setState({\n       clicks: 0,\n       score: this.state.score + 1\n    });\n    this.resetCards();\n    this.shuffleDeck();\n };\n\n  \n     handleClick = id => {\n        console.log(`clicked card id: ${id}`);\n        this.shuffleDeck();\n  \n        this.setState({\n           clicks: this.state.clicks + 1\n        });\n\n\n        let newCards = this.state.data.slice();\n\n        newCards.map(obj => {\n           if (obj.id === id) {\n              if (obj.clicked) {\n                 this.gameOver();\n              } else {\n                 obj.clicked = true;\n              }\n           }\n        });\n  \n        if (this.state.clicks >= this.state.data.length - 1) {\n           newCards.map(obj => {\n              if (obj.id === id) {\n                 if (obj.clicked) {\n                    this.gameWin();\n                 } else {\n                    return;\n                 }\n              }\n           });\n        }\n     };\n  \n\n \n\n    render() {\n        return (\n         <Container>\n         <Header score={this.state.score} topScore = {this.state.topScore} />\n         {this.state.data.map(card => (\n          <GameCard\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n          ))}\n        </Container>   \n        );\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}