{"ast":null,"code":"import _objectSpread from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kjordan/Desktop/Clicky4/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js\";\nimport React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: data,\n      score: 0,\n      topScore: 0,\n      message: \"Click as many images as you can without repeating\"\n    };\n\n    _this.cardClicked = function (id) {\n      var cardArray2 = _this.state.data.map(function (item) {\n        var guessedCorrectly = false;\n\n        if (item.id === id) {\n          if (!item.clicked) {\n            item.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return item;\n      });\n\n      guessedCorrectly ? _this.correctGuess(cardArray2) : _this.wrongGuess(cardArray2);\n    };\n\n    _this.resetDeck = function (data) {\n      var resetData = data.map(function (item) {\n        return _objectSpread({}, item, {\n          clicked: false\n        });\n      }); // console.log(data);\n      // console.log(resetData);\n\n      return _this.shuffleDeck(resetData);\n    };\n\n    _this.correctGuess = function (newData) {\n      var newScore = _this.state.score;\n      newScore++;\n      var newTopScore = Math.max(newScore, _this.state.topScore);\n\n      _this.setState({\n        data: _this.shuffleDeck(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.wrongGuess = function (newData) {\n      _this.setState({\n        data: _this.resetDeck(newData),\n        score: 0\n      });\n    };\n\n    _this.gameCardClick = function (id) {\n      var guessedCorrectly = false; // newData will be the data array with updated clicked properties\n\n      var newData = _this.state.data.map(function (item) {\n        if (item.id === id) {\n          if (!item.clicked) {\n            item.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return item;\n      }); // if guessedCorrectly = true, run the correctGuess function,\n      // else run the wrongGuess function\n\n\n      guessedCorrectly ? _this.correctGuess(newData) : _this.wrongGuess(newData);\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.data.map(function (item) {\n        return React.createElement(\"div\", {\n          className: \"animated rollIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(GameCard, {\n          key: item.id,\n          id: item.id,\n          image: item.image,\n          clicked: item.clicked,\n          handleClick: _this2.gameCardClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      })));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/kjordan/Desktop/Clicky4/src/components/Game/Game.js"],"names":["React","Component","Container","GameCard","Header","data","Game","state","score","topScore","message","cardClicked","id","cardArray2","map","item","guessedCorrectly","clicked","correctGuess","wrongGuess","resetDeck","resetData","shuffleDeck","newData","newScore","newTopScore","Math","max","setState","gameCardClick","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport GameCard from \"../GameCard\";\nimport Header from \"../Header\";\nimport data from \"../../data\";\n\n\nclass Game extends Component {\n\n   state = {\n       data,\n       score: 0,\n       topScore: 0,\n       message: \"Click as many images as you can without repeating\"\n   };\n\n  cardClicked = id => { \n\n      const cardArray2 = this.state.data.map(item => { \n         let guessedCorrectly = false;\n         if (item.id === id) { \n            if(!item.clicked) {\n            item.clicked = true; \n            guessedCorrectly = true;\n            }\n         }\n         return item;\n      }); \n      guessedCorrectly ? this.correctGuess(cardArray2) : this.wrongGuess(cardArray2); \n\n  };\n\n  \n\n\n\n   // resets all the clicked properties to false\n   resetDeck = data => {\n       const resetData = data.map(item => ({ ...item, clicked: false }));\n       // console.log(data);\n       // console.log(resetData);\n       return this.shuffleDeck(resetData);\n     };\n\n   // checks to see if score is higher than the topscore then updates the state with the update array\n   correctGuess = newData => {\n       let newScore = this.state.score;\n       newScore++\n       let newTopScore = Math.max(newScore, this.state.topScore);\n\n       this.setState({\n           data: this.shuffleDeck(newData),\n           score: newScore,\n           topScore: newTopScore,\n        \n       })\n   }\n\n   // restarts the game with fresh data\n   wrongGuess = newData => {\n       this.setState({\n           data: this.resetDeck(newData),\n           score: 0\n       })\n   }\n\n   // when a card is clicked, check if it has been clicked before,\n   // then update that cards clicked property\n   gameCardClick = id => {\n       let guessedCorrectly = false;\n       // newData will be the data array with updated clicked properties\n       const newData = this.state.data.map(item => {\n         if (item.id === id) {\n           if (!item.clicked) {\n             item.clicked = true;\n             guessedCorrectly = true;\n           }\n         }\n         return item;     \n       });\n       // if guessedCorrectly = true, run the correctGuess function,\n       // else run the wrongGuess function\n       guessedCorrectly ? this.correctGuess(newData) : this.wrongGuess(newData);\n     };\n\n   render() {\n       return (\n           <div className=\"animated fadeIn\">\n               <Header score={this.state.score} topScore = {this.state.topScore} />\n         \n               <Container>\n                   {\n                       this.state.data.map(item => (\n                           <div className=\"animated rollIn\">\n                               <GameCard\n                                   key={item.id}\n                                   id={item.id} \n                                   image={item.image}\n                                   clicked={item.clicked}\n                                   handleClick={this.gameCardClick}\n                               />      \n                           </div>  \n                       ))\n                   }\n               </Container>\n    \n           </div>\n       );\n   }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}